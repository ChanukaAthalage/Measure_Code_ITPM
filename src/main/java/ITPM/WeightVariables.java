/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ITPM;


import static ITPM.complexityVariables.jTable1;
import static ITPM.Dashboard.Dash_UploadSpace;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Chanuka
 */
public class WeightVariables extends javax.swing.JFrame {

    /**
     * Creates new form WeightSize
     */
    public WeightVariables() {
        initComponents();
        setResizable(false);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextChange = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabelChange = new javax.swing.JLabel();
        jButtonStart = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Global variable", "2"},
                {"Local variable", "1"},
                {"Primitive data type variable", "1"},
                {"Composite data type variable", "2"}
            },
            new String [] {
                "Program Component", "Weight"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setRowHeight(24);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Change");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextChange.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextChangeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Change Weight :");

        jLabelChange.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelChange.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jButtonStart.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonStart.setText("Start Measuring");
        jButtonStart.setActionCommand("Start ");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Weights related to the variable factor");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabelChange, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextChange, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 74, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(123, 123, 123))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonStart)
                                .addGap(251, 251, 251))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelChange, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextChange, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed

           //creating an object of complexityVariable class
           complexityVariables cv = new complexityVariables();
           cv.setVisible(true);
           
           
           //creating objects of tables
           
           DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
           Reader inputString = new StringReader(Dash_UploadSpace.getText().toString());
           DefaultTableModel dtm = (DefaultTableModel)jTable1.getModel();
           
           //creating an object of buffer reader
           
           BufferedReader br = new BufferedReader(inputString);
           
           //defining variables
           
           String text;
           String text1;
           String text2;
           String text3;
           String previousText;
            
           int Npdtv = 0;
           int Ncdtv = 0;
           int Wpdtv = 0;
           int Wcdtv = 0;
           int Wvs = 0;
           int Cv = 0;
           int previousC = 0;
           int cRBrackets = 0;
           int cLBrackets = 0;
           
           int countLine = 0;
           //int count = 0;
           
           //String lineText = "";
           
           
        try {
            //reading lines untill there are no lines left
            
            while((text = br.readLine()) != null){
                //cheacking whether the line contains control structures
                
               if(text.contains("if") || text.contains("while") || text.contains("do") || text.contains("for") || text.contains("switch") || text.contains("case")){
                   //counting opened brackets
                   
                   if(text.contains("{")){
                       cRBrackets++;
                       dtm.setValueAt(text,countLine,1);
                       dtm.setValueAt(countLine+1,countLine,0);
                     
                   }else{
                       text = br.readLine();
                       cRBrackets++;
                       dtm.setValueAt(text,countLine,1);
                       dtm.setValueAt(countLine+1,countLine,0);
                       countLine++;
                   }
                   
                   //runing inside control structures until it's over
                   
                   while(cRBrackets != cLBrackets){
                       if(text.contains("{")){
                          cRBrackets++;
                          dtm.setValueAt(text,countLine,1);
                          dtm.setValueAt(countLine+1,countLine,0);
                          text = br.readLine();
                          countLine++;
                          
                   // counting closed brackets
                          
                       }else if(text.contains("}")){
                          cLBrackets++;
                           if(cRBrackets == cLBrackets){
                                 dtm.setValueAt(text,countLine,1);
                                 dtm.setValueAt(countLine+1,countLine,0);
                                 countLine++;
                                  
                                }else{
                                  dtm.setValueAt(text,countLine,1);
                                  dtm.setValueAt(countLine+1,countLine,0); 
                                  text = br.readLine(); 
                                  countLine++;
                                }
                       }else{
                          dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0); 
                          text = br.readLine(); 
                          countLine++;
                       }
                   }
                   
                 //checking whether line contains an opening of a method
                 
               }else if(text.contains("public") && !text.contains("class")){
                   if(text.contains("{")){
                       dtm.setValueAt(text,countLine,1);
                       dtm.setValueAt(countLine+1,countLine,0);
                       cRBrackets++;
                  
                   }else{
                       dtm.setValueAt(text,countLine,1);
                       dtm.setValueAt(countLine+1,countLine,0);
                       text = br.readLine();
                       cRBrackets++;
                       countLine++;
                   }
                   
                   //runing inside method until it's over
                   
                   while(cRBrackets != cLBrackets){
                       if(text.contains("{")){
                           dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                          cRBrackets++;
                          text = br.readLine();
                          countLine++;
                          
                   // counting closed brackets
                   
                       }else if(text.contains("}")){
                          
                          cLBrackets++;
                        
                            if(cRBrackets == cLBrackets){
                                 dtm.setValueAt(text,countLine,1);
                                 dtm.setValueAt(countLine+1,countLine,0);
                                 countLine++;
                                  
                                }else{
                                  dtm.setValueAt(text,countLine,1);
                                  dtm.setValueAt(countLine+1,countLine,0);
                                  countLine++;
                                  text = br.readLine(); 
                                }
                       }else{
                         
                   //checking whether line contains int 
                   
                        if(text.contains("int") && !text.contains("print") && !text.contains("(int)")){
                            
                            String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                     
                      
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                             text = br.readLine();
                      
                     //checking whether line contains float,double,long,short,byte,boolean,char
                     
                        }else if(text.contains("float") && text.contains("(float)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("double") && !text.contains("(double)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("long") && !text.contains("(long)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("short") && !text.contains("(short)")){
                            
                            String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("byte") && !text.contains("(byte)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("boolean") && !text.contains("(boolean)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("char") && !text.contains("(char)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            text = br.readLine();
                             
                       //checking whether there are non primitive data types
                       
                        }else if(text.contains("String") && !text.contains("(String)")){
                            
                             String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Ncdtv++;
                            }
                        }
                            
                            Ncdtv++;
                            dtm.setValueAt(Ncdtv,countLine,4);
                            dtm.setValueAt(Npdtv,countLine,3);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wcdtv = Integer.parseInt(model.getValueAt(3,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Ncdtv = 0;
                            countLine++;
                            text = br.readLine();
                            
                        }else if(text.contains("private")){
                            if(!text.contains("int") || !text.contains("float") || !text.contains("boolean") || !text.contains("char") || !text.contains("short") || !text.contains("long") || !text.contains("byte") || !text.contains("String") || !text.contains("double")){
                                
                                 String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                                Ncdtv++;
                            dtm.setValueAt(Ncdtv,countLine,4);
                            dtm.setValueAt(Npdtv,countLine,3);
                            Wvs = Integer.parseInt(model.getValueAt(1,1).toString());    
                            Wcdtv = Integer.parseInt(model.getValueAt(3,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Ncdtv = 0;
                            countLine++;
                            text = br.readLine();
                            }
                        }else{
                            
                            //printing lines which are not containing any data types
                            
                              dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                          text = br.readLine(); 
                          countLine++;
                        }
                       }
                   }
                   
               //checking whether line contains int
               
               }else if(text.contains("int") && !text.contains("print") && !text.contains("(int)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
                //checking whether line contains float,double,long,short,byte,boolean,char
                
               }else if(text.contains("float") && !text.contains("(float)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
                 //checking whether there are non primitive data types
               }else if(text.contains("double") && !text.contains("(double)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("long") && !text.contains("(long)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("short") && !text.contains("(short)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("byte") && !text.contains("(byte)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("boolean") && !text.contains("(boolean)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("char") && !text.contains("(char)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Npdtv++;
                            }
                        }
                            
                            Npdtv++;
                            dtm.setValueAt(Npdtv,countLine,3);
                            dtm.setValueAt(Ncdtv,countLine,4);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wpdtv = Integer.parseInt(model.getValueAt(2,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Npdtv = 0;
                            countLine++;
                            
               }else if(text.contains("String") && !text.contains("(String)")){
                   
                    String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Ncdtv++;
                            }
                        }
                            
                            Ncdtv++;
                            dtm.setValueAt(Ncdtv,countLine,4);
                            dtm.setValueAt(Npdtv,countLine,3);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wcdtv = Integer.parseInt(model.getValueAt(3,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Ncdtv = 0;
                            countLine++;
                            
               }else if(text.contains("private")){
                            if(!text.contains("int") || !text.contains("float") || !text.contains("boolean") || !text.contains("char") || !text.contains("short") || !text.contains("long") || !text.contains("byte") || !text.contains("String") || !text.contains("double")){
                                
                                 String[] newString = text.split("\\s+");
                            for(String ss : newString){
                     
                       if(ss.contains(",")){
                            Ncdtv++;
                            }
                        }
                            Ncdtv++;
                            dtm.setValueAt(Ncdtv,countLine,4);
                            dtm.setValueAt(Npdtv,countLine,3);
                            Wvs = Integer.parseInt(model.getValueAt(0,1).toString());    
                            Wcdtv = Integer.parseInt(model.getValueAt(3,1).toString());
                            dtm.setValueAt(Wvs,countLine,2);
                            Cv = Wvs * (Npdtv * Wpdtv + Ncdtv * Wcdtv);
                            dtm.setValueAt(Cv,countLine,5);
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            Ncdtv = 0;
                            countLine++;
                            }
               
               }else{
                   
                   //printing lines which are not containing any data types
                   
                            dtm.setValueAt(text,countLine,1);
                            dtm.setValueAt(countLine+1,countLine,0);
                            countLine++;
               }
            }
        } catch (IOException ex) {
            Logger.getLogger(WeightVariables.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
            
            
        
 
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jTextChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextChangeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextChangeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        int i = jTable2.getSelectedRow();
        
        if(i >= 0){
            model.setValueAt(jTextChange.getText(),i,1);
        }else{
            JOptionPane.showMessageDialog(null,"Click on a row to change");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)jTable2.getModel();
        int selectedRow = jTable2.getSelectedRow();
        jLabelChange.setText(model.getValueAt(selectedRow,0).toString());
        jTextChange.setText(model.getValueAt(selectedRow,1).toString());
    }//GEN-LAST:event_jTable2MouseClicked

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(WeightVariables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(WeightVariables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(WeightVariables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(WeightVariables.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new WeightVariables().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelChange;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextChange;
    // End of variables declaration//GEN-END:variables
}
